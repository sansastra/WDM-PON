package rng.distribution;

import rng.Distribution;
import org.uncommons.maths.random.GaussianGenerator;
import org.uncommons.maths.random.MersenneTwisterRNG;

/**
 * Class for log normal distribution
 *
 * @author Fran Carpio
 */
public class LogNormalDistribution extends Distribution {

    GaussianGenerator gaussianGenerator;
    private final String NAME = "LOGN";
    private double mean; // for normal distribution
    private double SD;   //  ''

    /**
     * Constructor class
     *
     * @param mu    mean value
     * @param sigma standard deviation value
     * @param seed  initial seed value
     */
    public LogNormalDistribution(double mu, double sigma, byte[] seed) {
        super(mu, sigma, seed);

        MersenneTwisterRNG rng = new MersenneTwisterRNG(seed);

        double variance = Math.log(sigma * sigma / (mu * mu) + 1.0D);
        mean = Math.log(mu) - 0.5D * variance;
        SD = Math.sqrt(variance);
        this.gaussianGenerator = new GaussianGenerator(mean, Math.sqrt(variance), rng);
    }

    /**
     * Get next value
     *
     * @return double value generated by the RNG
     */
    @Override
    public Double execute() {
        return Math.exp(this.gaussianGenerator.nextValue());
    }

    public double getMUlogN (){return mean;}

    public double getSigmaLogN(){return SD;}
    /**
     * Get the distribution name
     *
     * @return string distribution name
     */
    @Override
    public String getDistributionName() {
        return NAME;
    }
}
